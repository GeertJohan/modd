#!/usr/bin/env python2

import contextlib
import fnmatch
import glob
import os
import shutil
import subprocess


DSTDIR = "./tmp"
ARCHS = [
    ("darwin", "amd64", "osx64", "tgz"),
    ("windows", "amd64", "windows64", "zip"),
    ("linux", "amd64", "linux64", "tgz"),
    ("linux", "arm", "linuxARM", "tgz"),
    ("netbsd", "amd64", "netbsd64", "tgz"),
    ("netbsd", "arm", "netbsdARM", "tgz"),
    ("openbsd", "amd64", "openbsd64", "tgz"),
    ("freebsd", "amd64", "freebsd64", "tgz"),
]


@contextlib.contextmanager
def chdir(newdir):
    curdir = os.getcwd()
    try:
        os.chdir(newdir)
        yield
    finally:
        os.chdir(curdir)


def version():
    print "Installing locally"
    subprocess.call(["go", "install", "./cmd/modd"])
    p = subprocess.Popen(["modd", "--version"], stderr=subprocess.PIPE)
    return p.communicate()[1].strip()


def build(vers, goos, goarch, name, archive):
    dst = os.path.join(DSTDIR, "modd-%s-%s"%(vers, name))
    print "building to ", dst
    for f in glob.glob(dst + "*"):
        if os.path.isdir(f):
            shutil.rmtree(f)
        else:
            os.unlink(f)
    os.makedirs(dst)
    env = os.environ.copy()
    env["GOOS"] = goos
    env["GOARCH"] = goarch
    subprocess.call(
        [
            "go", "build",
            "-o", os.path.join(dst, "modd"),
            "./cmd/modd"
        ],
        env = env
    )

    pkgdst = os.path.join(DSTDIR, "packages", "modd-%s-%s"%(vers, name))
    if archive == "tgz":
        print "\tmaking .tgz"
        subprocess.Popen(
            ["tar", "-czvf", pkgdst + ".tgz", dst],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        ).communicate()
    elif archive == "zip":
        print "\tmaking .zip"
        subprocess.Popen(
            ["zip", "-r", pkgdst + ".zip", dst],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        ).communicate()

def main():
    v = version()
    print "Version is: ", v

    subprocess.call(
        [
            "mkdir",
            "-p",
            os.path.join(DSTDIR, "packages")
        ]
    )

    for i in ARCHS:
        build(v, *i)



main()
